import{c as e,m as r,o as a}from"./chunks/framework.CcfPirFf.js";const i="/assets/xdoctest-1.twGhXbsV.jpg",o="/assets/xdoctest-2.aPhS1ooI.jpg",l="/assets/xdoctest-3.Bmde-M0u.jpg",n="/assets/xdoctest-4.CQRxEsNO.jpg",s="/assets/xdoctest-5.DMtIpjJh.jpg",g="/assets/xdoctest-6.4nJubk8N.jpg",h="/assets/xdoctest-7.Ddmk4eg3.jpg",d="/assets/xdoctest-8.BJQ47NZd.jpg",c="/assets/xdoctest-9.Abp2_MFf.jpg",p="/assets/xdoctest-10.C7e6x3bs.jpg",u="/assets/xdoctest-11.B_U6cpOH.jpg",f="/assets/xdoctest-12.6U1ca7Vv.jpg",k=JSON.parse('{"title":"项目收官｜将 xdoctest 引入到飞桨框架工作流中","description":"","frontmatter":{"title":"项目收官｜将 xdoctest 引入到飞桨框架工作流中","date":"2023-12-27T00:00:00.000Z","author":{"name":"孙师傅","github":"sunzhongkai588"},"co_authors":[{"name":"顺师傅","github":"megemini"}],"category":"community-activity"},"headers":[],"relativePath":"posts/xdoctest-project.md","filePath":"posts/xdoctest-project.md"}'),b={name:"posts/xdoctest-project.md"},x=Object.assign(b,{setup(_){return(m,t)=>(a(),e("div",null,[...t[0]||(t[0]=[r('<p>【将 xdoctest 引入飞桨工作流】的项目总结。</p><p>【<a href="https://github.com/PaddlePaddle/Paddle/issues/54705" target="_blank" rel="noreferrer">将 xdoctest 引入飞桨工作流</a>】 是第六届“中国软件开源创新大赛”开源任务挑战赛赛道——<a href="https://github.com/PaddlePaddle/Paddle/issues/53172" target="_blank" rel="noreferrer">飞桨框架任务挑战赛</a>的赛题之一（赛题五），由社区开发者<strong>顺师傅</strong>（<a href="https://github.com/megemini" target="_blank" rel="noreferrer">@megemini</a>）主导，是 Paddle 社区迄今为止影响范围最大的开源活动 🎊。该项目规模极其庞大，涉及一千多个 API 示例的整合和数十万行代码的优化，由超过 20 名社区开发者共同参与完成。</p><ul><li>想知道顺师傅的故事 👉 <a href="./shun-story">【开源江湖闲聊录】社区掌舵人：顺师傅的 Paddle 之旅</a></li><li>想了解“中国软件开源创新大赛” 👉 <a href="https://aistudio.baidu.com/competition/detail/911/0/introduction" target="_blank" rel="noreferrer">活动详情</a>、<a href="./xian-event">活动剪影</a></li></ul><p>本篇博客主要依据顺师傅的赛题答辩内容进行编写，从<strong>过去</strong>、<strong>现在</strong>、<strong>未来</strong>三个角度，对项目进行分析、总结和展望。</p><h2 id="print-past-过去" tabindex="-1">&gt;&gt;&gt; print(past) 过去 <a class="header-anchor" href="#print-past-过去" aria-label="Permalink to &quot;&gt;&gt;&gt; print(past) 过去&quot;">​</a></h2><h3 id="_01-关于任务" tabindex="-1">01 - 关于任务 <a class="header-anchor" href="#_01-关于任务" aria-label="Permalink to &quot;01 - 关于任务&quot;">​</a></h3><p>文档是用户了解项目最主要的方式，而 API 文档更是承担了用户了解每个 API 使用方式的重要入口。Paddle 为上千个公开 API 提供了详尽的 API 文档，每个 API 都有对应的示例代码，以便用户能够最直观的了解 API 的使用方式。</p><p>但由于历史原因，Paddle 的 API 文档中的示例代码是直接使用 Python 代码块形式编写的，这使得我们无法对示例代码的输出进行自动化检查，从而无法保证展示给用户的示例代码的有效性，导致经常出现用户发现文档中的输出与实际运行结果不一致的情况。</p><div style="display:flex;justify-content:center;"><figure style="width:80%;"><img src="'+i+'"><figcaption>过去 API 文档示例代码格式</figcaption></figure></div><p>而本任务，则是要求将 xdoctest 工具引入到 Paddle CI 检查流水线中，利用 xdoctest 能够自动执行示例代码，并对示例代码的输出进行检查的特性，对 Paddle API 文档中的示例代码进行检查，确保示例代码的输出结果与实际运行结果一致，从而提高 Paddle API 文档的质量。</p><h4 id="print-why-do-it-为什么做这个事情" tabindex="-1">&gt;&gt;&gt; print(why_do_it) 为什么做这个事情？ <a class="header-anchor" href="#print-why-do-it-为什么做这个事情" aria-label="Permalink to &quot;&gt;&gt;&gt; print(why_do_it) 为什么做这个事情？&quot;">​</a></h4><p>文档是开发者接触 Paddle 的第一手学习资料，需要保证用户能够 <strong>快速、正确</strong> 地上手 Paddle 框架，代码示例的重要程度也就不言而喻。</p><h4 id="print-do-it-fast-何为快速" tabindex="-1">&gt;&gt;&gt; print(do_it_fast) 何为快速？ <a class="header-anchor" href="#print-do-it-fast-何为快速" aria-label="Permalink to &quot;&gt;&gt;&gt; print(do_it_fast) 何为快速？&quot;">​</a></h4><p>能够引导用户学习飞桨官方文档，并直接获得使用相应 API 接口的能力。</p><h4 id="print-do-it-right-何为正确" tabindex="-1">&gt;&gt;&gt; print(do_it_right) 何为正确？ <a class="header-anchor" href="#print-do-it-right-何为正确" aria-label="Permalink to &quot;&gt;&gt;&gt; print(do_it_right) 何为正确？&quot;">​</a></h4><p>提供给用户正确运行、结果符合预期的示例代码。</p><h3 id="_02-现有方案" tabindex="-1">02 - 现有方案 <a class="header-anchor" href="#_02-现有方案" aria-label="Permalink to &quot;02 - 现有方案&quot;">​</a></h3><p>过去 Paddle 的 API 文档示例代码，对于普通 Python 语句没有提示符要求，对于输出则使用 <code>#</code> 进行注释。</p><h4 id="print-problem-过去这样做有什么问题" tabindex="-1">&gt;&gt;&gt; print(problem) 过去这样做有什么问题？ <a class="header-anchor" href="#print-problem-过去这样做有什么问题" aria-label="Permalink to &quot;&gt;&gt;&gt; print(problem) 过去这样做有什么问题？&quot;">​</a></h4><p><img src="'+o+'" alt="xdoctest-02"></p><ul><li>需要用户自己区分普通注释与代码输出</li><li>不符合 Python 开源项目里对可交互示例的实践和习惯</li><li>代码检查不严格，只保证运行，<strong>不保证正确</strong></li></ul><h4 id="print-solutions-都有哪些现成的解决方案" tabindex="-1">&gt;&gt;&gt; print(solutions) 都有哪些现成的解决方案？ <a class="header-anchor" href="#print-solutions-都有哪些现成的解决方案" aria-label="Permalink to &quot;&gt;&gt;&gt; print(solutions) 都有哪些现成的解决方案？&quot;">​</a></h4><p><img src="'+l+'" alt="xdoctest-03"></p><p>Python 标准库中内置了 <a href="https://docs.python.org/3/library/doctest.html" target="_blank" rel="noreferrer">doctest</a> 可用于示例代码的自动执行和检查。但 doctest 是使用正则表达式来解析示例代码部分的，这使得示例代码的编写必须遵循严格的格式要求。</p><p><a href="https://xdoctest.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">xdoctest</a> 是一个基于 AST 的 Python 示例代码自动执行和检查工具，相比 doctest，xdoctest 的示例代码格式要求更加宽松，xdoctest 作者在博客 <a href="https://erotemic.wordpress.com/2018/06/12/extending-python-doctests-xdoctest/" target="_blank" rel="noreferrer">Extending Python Doctests – xdoctest</a> 详细阐述了这一点。</p><p>显然后者是更适合 Paddle 的需求的，因此我们选择将 xdoctest 作为引入 Paddle CI 检查流水线的基础工具。这里为什么说是基础工具呢？是因为在后期迭代开发过程中发现 xdoctest 本身也有很多不足，因此我们在 xdoctest 的基础上进行了大量的二次开发，以满足 Paddle 的需求。</p><h3 id="_03-挑战" tabindex="-1">03 - 挑战 <a class="header-anchor" href="#_03-挑战" aria-label="Permalink to &quot;03 - 挑战&quot;">​</a></h3><h4 id="可以预见的挑战" tabindex="-1">&gt;&gt;&gt; 可以预见的挑战 <a class="header-anchor" href="#可以预见的挑战" aria-label="Permalink to &quot;&gt;&gt;&gt; 可以预见的挑战&quot;">​</a></h4><ul><li>有 800 万开发者每天都在学习、使用 Paddle 框架，xdoctest 的引入<strong>需要无缝切换</strong></li><li>Paddle 框架包含 1400+ API，还涉及到版本更迭、API 迭代，<strong>框架庞大复杂</strong></li><li>由于深度学习特殊性，同一示例代码在不同设备环境（CPU、GPU）会有差异性，<strong>需要区别验证</strong></li></ul><h4 id="项目的三个大坑" tabindex="-1">&gt;&gt;&gt; 项目的三个大坑 <a class="header-anchor" href="#项目的三个大坑" aria-label="Permalink to &quot;&gt;&gt;&gt; 项目的三个大坑&quot;">​</a></h4><ul><li>历史包袱重</li><li>项目管理难</li><li>工程量巨大</li></ul><h2 id="print-now-现在" tabindex="-1">&gt;&gt;&gt; print(now) 现在 <a class="header-anchor" href="#print-now-现在" aria-label="Permalink to &quot;&gt;&gt;&gt; print(now) 现在&quot;">​</a></h2><h3 id="_01-项目分解" tabindex="-1">01 - 项目分解 <a class="header-anchor" href="#_01-项目分解" aria-label="Permalink to &quot;01 - 项目分解&quot;">​</a></h3><p>一切源于一场对<a href="https://github.com/PaddlePaddle/community/pull/547" target="_blank" rel="noreferrer">设计文档（RFC）</a>的讨论。</p><div style="display:flex;justify-content:center;"><figure style="width:80%;"><img src="'+n+'"><figcaption>RFC 设计文档</figcaption></figure></div><h4 id="print-discussion-都讨论了些什么" tabindex="-1">&gt;&gt;&gt; print(discussion) 都讨论了些什么？ <a class="header-anchor" href="#print-discussion-都讨论了些什么" aria-label="Permalink to &quot;&gt;&gt;&gt; print(discussion) 都讨论了些什么？&quot;">​</a></h4><p>在顺师傅和我们的交流中，共同抛出了相当多的问题进行讨论。这个阶段也遇到了项目的第一个大坑——<strong>历史包袱重</strong>。</p><h5 id="设计文档-抛开可以预见的那些挑战不说" tabindex="-1">设计文档（抛开可以预见的那些挑战不说） <a class="header-anchor" href="#设计文档-抛开可以预见的那些挑战不说" aria-label="Permalink to &quot;设计文档（抛开可以预见的那些挑战不说）&quot;">​</a></h5><ul><li>Paddle 代码和 docs 都有代码检查逻辑</li><li>代码检查逻辑还不尽相同</li><li>Paddle 与 PyTorch 很多实现方式不一样</li><li>PyTorch 的检查方式并不完整</li></ul><h5 id="后知后觉" tabindex="-1">后知后觉 <a class="header-anchor" href="#后知后觉" aria-label="Permalink to &quot;后知后觉&quot;">​</a></h5><ul><li>文档中的示例代码未及时随着框架的演进和接口的的变化更新</li><li>接口变动、逻辑变动</li><li>与单元测试关注点不同，测试方案不同</li></ul><h4 id="print-rfc-for-project-完成设计文档" tabindex="-1">&gt;&gt;&gt; print(rfc_for_project) 完成设计文档 <a class="header-anchor" href="#print-rfc-for-project-完成设计文档" aria-label="Permalink to &quot;&gt;&gt;&gt; print(rfc_for_project) 完成设计文档&quot;">​</a></h4><p>经过细致的讨论和顺师傅对上述问题的梳理，逐渐理清了项目设计思路，并最终完成设计文档，正式启动项目。</p><ul><li>各方参与几十轮的讨论</li><li><strong>11470</strong> 字</li><li><strong>36</strong> 页</li><li><strong>2</strong> 个大版本，<strong>3</strong> 个小版本</li></ul><h4 id="print-milestones-里程碑" tabindex="-1">&gt;&gt;&gt; print(milestones) 里程碑 <a class="header-anchor" href="#print-milestones-里程碑" aria-label="Permalink to &quot;&gt;&gt;&gt; print(milestones) 里程碑&quot;">​</a></h4><p>在顺师傅完成项目拆解后，开始着手开发。此时遇到第二个大坑——<strong>项目管理难</strong>。</p><div style="display:flex;justify-content:center;"><figure style="width:60%;"><img src="'+s+'"><figcaption>项目 milestones</figcaption></figure></div><h4 id="print-just-use-it-直接用-xdoctest-不行吗" tabindex="-1">&gt;&gt;&gt; print(just_use_it) 直接用 xdoctest 不行吗？ <a class="header-anchor" href="#print-just-use-it-直接用-xdoctest-不行吗" aria-label="Permalink to &quot;&gt;&gt;&gt; print(just_use_it) 直接用 xdoctest 不行吗？&quot;">​</a></h4><p>xdoctest 并不适用如 Paddle 此类庞大复杂的框架。</p><ul><li><strong>【接口遍历不全】</strong> 对于全局命名等情况无能为力</li><li><strong>【检查环境混用】</strong> 不能隔离多个示例检查的逻辑</li><li><strong>【无数据类型检查】</strong> 不能比对浮点数、复数等情况</li><li><strong>【无法进行全局控制】</strong> 如 timeout，错误语句等</li></ul><h4 id="print-technique-solutions-主要的技术解决方案" tabindex="-1">&gt;&gt;&gt; print(technique_solutions) 主要的技术解决方案 <a class="header-anchor" href="#print-technique-solutions-主要的技术解决方案" aria-label="Permalink to &quot;&gt;&gt;&gt; print(technique_solutions) 主要的技术解决方案&quot;">​</a></h4><ul><li><strong>针对【接口遍历不全】</strong> 此次任务沿用飞桨原有的接口遍历逻辑，将原有的 xdoctest 的检查逻辑进行拆分</li><li><strong>针对【检查环境混用】</strong> 此次任务利用多进程技术对执行环境进行隔离，进而防止环境污染等情况</li><li><strong>针对【无数据类型检查】</strong> 此次任务对 xdoctest 的检查逻辑进行 patch，从而可以比对整数、浮点数、复数等情况</li><li><strong>针对【无法进行全局控制】</strong> 引入全局指令、全局语句检查机制</li></ul><h4 id="print-technique-solutions-more" tabindex="-1">&gt;&gt;&gt; print(technique_solutions.__more__) <a class="header-anchor" href="#print-technique-solutions-more" aria-label="Permalink to &quot;&gt;&gt;&gt; print(technique_solutions.\\_\\_more\\_\\_)&quot;">​</a></h4><p>进行重构，优化迁移环境</p><ul><li>全局指令转换</li><li>抽象示例检查类</li><li>解耦示例检查流程与检查类</li><li>解耦示例检查结果</li><li>日志级别分离</li></ul><h4 id="print-workload-工作量有多大" tabindex="-1">&gt;&gt;&gt; print(workload) 工作量有多大？ <a class="header-anchor" href="#print-workload-工作量有多大" aria-label="Permalink to &quot;&gt;&gt;&gt; print(workload) 工作量有多大？&quot;">​</a></h4><p>由于 Paddle 的公开 API 数量众多，且需要全量的优化对应文档的示例代码，所以在该阶段遇到第三个大坑——<strong>工程量巨大</strong>。</p><p>因此，我们选择<strong>相信开源的力量</strong>，号召 Paddle 社区的伙伴一起参与进来！</p><ul><li>代码到文档全流程</li><li>上千个 API</li><li>数百个源文件</li><li>数十万行代码</li><li>已有 24 位开发者近 3 个月的贡献</li></ul><h3 id="_02-里程碑" tabindex="-1">02 - 里程碑 <a class="header-anchor" href="#_02-里程碑" aria-label="Permalink to &quot;02 - 里程碑&quot;">​</a></h3><p><img src="'+g+'" alt="xdoctest-06"></p><h3 id="_03-开源社区" tabindex="-1">03 - 开源社区 <a class="header-anchor" href="#_03-开源社区" aria-label="Permalink to &quot;03 - 开源社区&quot;">​</a></h3><h4 id="print-happy-open-source-社区快乐开源活动" tabindex="-1">&gt;&gt;&gt; print(happy_open_source) 社区快乐开源活动 <a class="header-anchor" href="#print-happy-open-source-社区快乐开源活动" aria-label="Permalink to &quot;&gt;&gt;&gt; print(happy_open_source) 社区快乐开源活动&quot;">​</a></h4><p>飞桨快乐开源活动旨在鼓励更多的开发者参与到飞桨社区的开源建设中，帮助社区修复 bug 或贡献 feature，加入开源、共建飞桨。</p><p>在本赛题中，顺师傅发起了 2 个衍生的快乐开源任务，借助社区的力量来一起全量优化 Paddle 文档的示例代码。</p><h4 id="print-missions-0-开源任务一-修改中英文示例一致" tabindex="-1">&gt;&gt;&gt; print(missions_0) 开源任务一 ： 修改中英文示例一致 <a class="header-anchor" href="#print-missions-0-开源任务一-修改中英文示例一致" aria-label="Permalink to &quot;&gt;&gt;&gt; print(missions_0) 开源任务一 ： 修改中英文示例一致&quot;">​</a></h4><p>修改目前 Paddle docs 中仍使用 code-block 的示例代码为 COPY-FROM <a href="https://github.com/PaddlePaddle/docs/issues/5957" target="_blank" rel="noreferrer">docs#5957</a></p><div style="display:flex;justify-content:center;"><figure style="width:80%;"><img src="'+h+'"><figcaption>中文文档示例代码全部以 COPY-FROM 的形式和英文保持一致</figcaption></figure></div><h4 id="print-missions-1-开源任务二-修改旧的示例代码" tabindex="-1">&gt;&gt;&gt; print(missions_1) 开源任务二 ： 修改旧的示例代码 <a class="header-anchor" href="#print-missions-1-开源任务二-修改旧的示例代码" aria-label="Permalink to &quot;&gt;&gt;&gt; print(missions_1) 开源任务二 ： 修改旧的示例代码&quot;">​</a></h4><p>[xdoctest] 分批次修改已有代码的示例 <a href="https://github.com/PaddlePaddle/Paddle/issues/55629" target="_blank" rel="noreferrer">#55629</a></p><div style="display:flex;justify-content:center;"><figure style="width:80%;"><img src="'+d+'"><figcaption>修改已有示例以符合 Google Style样式</figcaption></figure></div><p>在开源任务二中，由于需要把控示例代码的修改效果，顺师傅也从开发者的身份逐渐转变成 <strong>Reviewer</strong>。</p><h5 id="print-reviewer" tabindex="-1">&gt;&gt;&gt; print(reviewer) <a class="header-anchor" href="#print-reviewer" aria-label="Permalink to &quot;&gt;&gt;&gt; print(reviewer)&quot;">​</a></h5><ul><li>更关注用户的体验</li><li>更关注代码的质量</li><li>更清楚开发者的诉求</li></ul><h5 id="print-reviewer-task" tabindex="-1">&gt;&gt;&gt; print(reviewer.__task__) <a class="header-anchor" href="#print-reviewer-task" aria-label="Permalink to &quot;&gt;&gt;&gt; print(reviewer.\\_\\_task\\_\\_)&quot;">​</a></h5><ul><li>熟悉 review 工作流</li><li>任务拆解 <ul><li>第一批：简单，开发者熟悉环境与流程</li><li>第二批：复杂，涉及 CPU/GPU 环境等情况</li><li>第三批：困难，涉及 C++、并行、静态图等</li></ul></li><li>阶段总结，问题反馈</li><li>开发、打磨工具 <code>convert_doctest</code></li></ul><h5 id="print-convert-doctest-doc-辅助工具" tabindex="-1">&gt;&gt;&gt; print(convert_doctest.__doc__) 辅助工具 <a class="header-anchor" href="#print-convert-doctest-doc-辅助工具" aria-label="Permalink to &quot;&gt;&gt;&gt; print(convert_doctest.\\_\\_doc\\_\\_) 辅助工具&quot;">​</a></h5><p>为了方便社区开发者完成示例代码的修改，顺师傅开发了 <a href="https://github.com/megemini/convert_doctest" target="_blank" rel="noreferrer">convert_doctest</a> 辅助工具，能够实现：</p><ul><li><strong>对示例代码进行初步转换</strong> ：自动修改示例格式，节省大量人工修改的时间。</li><li><strong>对修改后的示例代码进行本地检查</strong> ：不用等待 CI 的运行结果，本地即可验证与修改。</li></ul><p>极大提升了社区开发者完成任务的效率。</p><div style="display:flex;justify-content:center;"><figure style="width:80%;"><img src="'+c+'"><figcaption>convert_doctest 效果</figcaption></figure></div><h4 id="print-missions-bravo-整体开源贡献" tabindex="-1">&gt;&gt;&gt; print(missions_bravo) 整体开源贡献 <a class="header-anchor" href="#print-missions-bravo-整体开源贡献" aria-label="Permalink to &quot;&gt;&gt;&gt; print(missions_bravo) 整体开源贡献&quot;">​</a></h4><ul><li>共有 <strong>24 位</strong> 开源开发者参与。</li><li>涉及约 <strong>450 个</strong> 文件。</li><li>涉及 <strong>数十万行</strong> 代码。</li><li>已有约 <strong>150 个</strong> PR 被合入。</li></ul><h4 id="回顾三个大坑" tabindex="-1">&gt;&gt;&gt; 回顾三个大坑 <a class="header-anchor" href="#回顾三个大坑" aria-label="Permalink to &quot;&gt;&gt;&gt; 回顾三个大坑&quot;">​</a></h4><p>在项目的开发过程中，前文提到的三个大坑，也被顺师傅逐一击破。</p><p><img src="'+p+'" alt="xdoctest-10"><img src="'+u+'" alt="xdoctest-11"><img src="'+f+'" alt="xdoctest-12"></p><h2 id="print-future-未来" tabindex="-1">&gt;&gt;&gt; print(future) 未来 <a class="header-anchor" href="#print-future-未来" aria-label="Permalink to &quot;&gt;&gt;&gt; print(future) 未来&quot;">​</a></h2><h3 id="_01-任务总结" tabindex="-1">01 - 任务总结 <a class="header-anchor" href="#_01-任务总结" aria-label="Permalink to &quot;01 - 任务总结&quot;">​</a></h3><h4 id="整体贡献" tabindex="-1">&gt;&gt;&gt; 整体贡献 <a class="header-anchor" href="#整体贡献" aria-label="Permalink to &quot;&gt;&gt;&gt; 整体贡献&quot;">​</a></h4><p><strong>主线</strong> 代码检查特性的迁移 &gt;&gt;&gt; 主要由<strong>个人独立</strong>完成。 <br><strong>支线</strong> 新旧示例代码的修改 &gt;&gt;&gt; 主要由<strong>开源社区</strong>完成。</p><ul><li>RFC《将 xdoctest 引入到飞桨框架工作流中》。</li><li>完成飞桨框架使用 xdoctest 进行示例代码检查的切换。</li><li>退场飞桨文档原有的示例代码检查。</li><li>完成飞桨框架全部示例代码对新格式的切换。</li><li>完成飞桨文档遗留 COPY-FROM 的切换。</li><li>完成飞桨文档《开发 API Python 端》与《API 文档书写规范》的更新。</li><li>完成飞桨文档官网对于新格式示例代码的兼容。</li><li>开源社区任务一：修改目前 Paddle docs 中仍使用 code-block 的示例代码为 COPY-FROM： <ul><li>涉及 PR：<strong>23 个</strong>；</li><li>涉及文件：<strong>82 个</strong>；</li><li>开源贡献者：<strong>7 人</strong>。</li></ul></li><li>开源社区任务二：xdoctest 分批次修改已有代码的示例： <ul><li>涉及 PR：<strong>123 个</strong>；</li><li>涉及文件：<strong>364 个</strong>；</li><li>开源贡献者：<strong>19 人</strong>。</li></ul></li></ul><h4 id="个人贡献" tabindex="-1">&gt;&gt;&gt; 个人贡献 <a class="header-anchor" href="#个人贡献" aria-label="Permalink to &quot;&gt;&gt;&gt; 个人贡献&quot;">​</a></h4><ul><li>调研分析、任务拆解、项目开发、代码 review。</li><li>RFC《将 xdoctest 引入到飞桨框架工作流中》</li><li>完成飞桨框架使用 xdoctest 进行示例代码检查的切换</li><li>退场飞桨文档原有的示例代码检查</li><li>完成飞桨文档《开发 API Python 端》与《API 文档书写规范》的更新</li><li>提交 PR：<strong>20 个</strong></li><li>开源社区 Review PR：<strong>59 个</strong></li><li>开发辅助工具 <strong>convert_doctest</strong></li></ul><h4 id="个人收获" tabindex="-1">&gt;&gt;&gt; 个人收获 <a class="header-anchor" href="#个人收获" aria-label="Permalink to &quot;&gt;&gt;&gt; 个人收获&quot;">​</a></h4><ul><li>开源协作，开发者 与 Reviewer 身份的转换</li><li>学习飞桨，更全面、更深入的学习；学习的越多，需要学习的更多</li><li>编程能力，更直接的需求反馈与实现</li><li>开拓视野，开源参与者之广，人外有人</li></ul><h3 id="_02-未来规划" tabindex="-1">02 - 未来规划 <a class="header-anchor" href="#_02-未来规划" aria-label="Permalink to &quot;02 - 未来规划&quot;">​</a></h3><h4 id="convert-doctest" tabindex="-1">&gt;&gt;&gt; CONVERT_DOCTEST <a class="header-anchor" href="#convert-doctest" aria-label="Permalink to &quot;&gt;&gt;&gt; CONVERT_DOCTEST&quot;">​</a></h4><ul><li>合入 Paddle、发布到 PyPI，回馈开源社区</li><li>思考是否有工具可以取代 xdoctest？是否单独开发 doctest 工具？</li></ul><h3 id="_03-开源贡献" tabindex="-1">03 - 开源贡献 <a class="header-anchor" href="#_03-开源贡献" aria-label="Permalink to &quot;03 - 开源贡献&quot;">​</a></h3><p>感谢以下参与开源任务的开发者们～</p><h4 id="开源任务一-修改中英文示例一致" tabindex="-1">&gt;&gt;&gt; 开源任务一：修改中英文示例一致 <a class="header-anchor" href="#开源任务一-修改中英文示例一致" aria-label="Permalink to &quot;&gt;&gt;&gt; 开源任务一：修改中英文示例一致&quot;">​</a></h4><p><a href="https://github.com/Ainavo" target="_blank" rel="noreferrer">@Ainavo</a>、 <a href="https://github.com/Li-fAngyU" target="_blank" rel="noreferrer">@Li-fAngyU</a>、 <a href="https://github.com/Liyulingyue" target="_blank" rel="noreferrer">@Liyulingyue</a>、 <a href="https://github.com/RedContritio" target="_blank" rel="noreferrer">@RedContritio</a>、 <a href="https://github.com/enkilee" target="_blank" rel="noreferrer">@enkilee</a>、 <a href="https://github.com/gouzil" target="_blank" rel="noreferrer">@gouzil</a>、 <a href="https://github.com/jjyaoao" target="_blank" rel="noreferrer">@jjyaoao</a>。</p><h4 id="开源任务二-修改旧的示例代码" tabindex="-1">&gt;&gt;&gt; 开源任务二：修改旧的示例代码 <a class="header-anchor" href="#开源任务二-修改旧的示例代码" aria-label="Permalink to &quot;&gt;&gt;&gt; 开源任务二：修改旧的示例代码&quot;">​</a></h4><p><a href="https://github.com/AndSonder" target="_blank" rel="noreferrer">@AndSonder</a>、 <a href="https://github.com/Candy2Tang" target="_blank" rel="noreferrer">@Candy2Tang</a>、 <a href="https://github.com/Difers" target="_blank" rel="noreferrer">@Difers</a>、 <a href="https://github.com/DrRyanHuang" target="_blank" rel="noreferrer">@DrRyanHuang</a>、 <a href="https://github.com/Kaedeharai" target="_blank" rel="noreferrer">@Kaedeharai</a>、 <a href="https://github.com/KongAKun" target="_blank" rel="noreferrer">@KongAKun</a>、 <a href="https://github.com/Liyulingyue" target="_blank" rel="noreferrer">@Liyulingyue</a>、 <a href="https://github.com/PommesPeter" target="_blank" rel="noreferrer">@PommesPeter</a>、 <a href="https://github.com/SigureMo" target="_blank" rel="noreferrer">@SigureMo</a>、 <a href="https://github.com/enkilee" target="_blank" rel="noreferrer">@enkilee</a>、 <a href="https://github.com/gouzil" target="_blank" rel="noreferrer">@gouzil</a>、 <a href="https://github.com/jinyouzhi" target="_blank" rel="noreferrer">@jinyouzhi</a>、 <a href="https://github.com/liyongchao911" target="_blank" rel="noreferrer">@liyongchao911</a>、 <a href="https://github.com/longranger2" target="_blank" rel="noreferrer">@longranger2</a>、 <a href="https://github.com/ooooo-create" target="_blank" rel="noreferrer">@ooooo-create</a>、 <a href="https://github.com/sunzhongkai588" target="_blank" rel="noreferrer">@sunzhongkai588</a>、 <a href="https://github.com/whisky-12" target="_blank" rel="noreferrer">@whisky-12</a>、 <a href="https://github.com/yoyoIcy" target="_blank" rel="noreferrer">@yoyoIcy</a>、 <a href="https://github.com/yuchen202" target="_blank" rel="noreferrer">@yuchen202</a>。</p><h4 id="飞桨工作人员" tabindex="-1">&gt;&gt;&gt; 飞桨工作人员 <a class="header-anchor" href="#飞桨工作人员" aria-label="Permalink to &quot;&gt;&gt;&gt; 飞桨工作人员&quot;">​</a></h4><p><a href="https://github.com/SigureMo" target="_blank" rel="noreferrer">@SigureMo</a>、 <a href="https://github.com/sunzhongkai588" target="_blank" rel="noreferrer">@sunzhongkai588</a>、 <a href="https://github.com/luotao1" target="_blank" rel="noreferrer">@luotao1</a>、 <a href="https://github.com/jzhang533" target="_blank" rel="noreferrer">@jzhang533</a>。</p>',106)])]))}});export{k as __pageData,x as default};
